=== ./DeviceStatusIndicatorView.swift ===
import SwiftUI

struct DeviceStatusIndicatorView: View {
    var isConnected: Bool
    var body: some View {
        HStack {
            Circle()
                .fill(isConnected ? Color.green : Color.red)
                .frame(width: 12, height: 12)
            Text(isConnected ? "Connected" : "Disconnected")
                .foregroundColor(isConnected ? .green : .red)
        }
    }
}


=== ./DeviceRefreshButton.swift ===
import SwiftUI

struct DeviceRefreshButton: View {
    var action: () -> Void
    var body: some View {
        Button(action: action) {
            Label("Refresh", systemImage: "arrow.clockwise")
        }
    }
}


=== ./PlugListView.swift ===
import SwiftUI

struct PlugListView: View {
    var title: String
    var plugs: [Plug]
    var onSelect: ((Plug) -> Void)? = nil
    @State private var hoveredPlugID: Plug.ID? = nil
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            Text(title.uppercased())
                .font(.caption)
                .fontWeight(.semibold)
                .foregroundColor(.secondary)
                .padding(.top, 12)
                .padding(.bottom, 4)
                .padding(.leading, 4)
            ForEach(plugs) { plug in
                Button(action: { onSelect?(plug) }) {
                    HStack(spacing: 8) {
                        Image(systemName: plug.direction == .input ? "arrow.down.circle" : "arrow.up.circle")
                            .foregroundColor(plug.direction == .input ? .blue : .orange)
                        Text(plug.name)
                            .fontWeight(.medium)
                        Spacer()
                        Text("#\(plug.number)")
                            .foregroundColor(.secondary)
                            .font(.caption)
                    }
                    .padding(.vertical, 6)
                    .padding(.horizontal, 10)
                    .background(
                        RoundedRectangle(cornerRadius: 8)
                            .fill(hoveredPlugID == plug.id ? Color.accentColor.opacity(0.15) : Color.clear)
                    )
                }
                .buttonStyle(PlainButtonStyle())
                .onHover { hovering in
                    hoveredPlugID = hovering ? plug.id : nil
                }
            }
        }
        .padding(.bottom, 4)
    }
}


=== ./Models/DeviceModels.swift ===
// Models/DeviceModels.swift
// Contains stubs for Device, Plug, Subunit, InfoBlock, AudioStreamFormat, etc.
import Foundation

struct Device: Identifiable, Hashable {
    let id: UUID = UUID()
    let guid: String
    let name: String
    let vendor: String
    let isConnected: Bool
    let units: [Unit]
    let subunits: [Subunit]
}

struct Unit: Identifiable, Hashable {
    let id: UUID = UUID()
    let isochronousInputPlugs: [Plug]
    let isochronousOutputPlugs: [Plug]
    let externalInputPlugs: [Plug]
    let externalOutputPlugs: [Plug]
}

struct Plug: Identifiable, Hashable {
    let id: UUID = UUID()
    let name: String
    let number: Int
    let direction: PlugDirection
    let usage: PlugUsage
    let subunitAddress: String
    let connectionInfo: ConnectionInfo?
    let currentStreamFormat: AudioStreamFormat?
    let supportedStreamFormats: [AudioStreamFormat]
}

struct ConnectionInfo: Hashable {
    let connectedSourceSubunit: String
    let connectedSourcePlug: String
    let connectionStatus: String
}

struct Subunit: Identifiable, Hashable {
    let id: UUID = UUID()
    let type: String // "Music", "Audio", etc.
    let present: Bool
    let musicDestinationPlugs: [Plug]?
    let musicSourcePlugs: [Plug]?
    let audioDestinationPlugs: [Plug]?
    let audioSourcePlugs: [Plug]?
    let statusDescriptor: InfoBlock?
}

struct InfoBlock: Identifiable, Hashable {
    let id: UUID = UUID()
    let type: String
    let compoundLength: Int
    let primaryFieldsLength: Int
    let primaryFields: [String: String]
    let rawBytes: Data
    let nestedBlocks: [InfoBlock]
}

// Helper extension for AudioStreamFormat if needed
extension AudioStreamFormat {
    func toString() -> String {
        "Sample Rate: \(sampleRate.description), Format: \(formatType.description)"
    }
}


=== ./DeviceSelectorView.swift ===
import SwiftUI

struct DeviceSelectorView: View {
    @Binding var selectedDevice: Device?
    var devices: [Device]
    var body: some View {
        Picker("", selection: $selectedDevice) {
            ForEach(devices) { device in
                Text(device.name).tag(device as Device?)
            }
        }
        .pickerStyle(MenuPickerStyle())
    }
}


=== ./UnitInfoSectionView.swift ===
import SwiftUI

struct UnitInfoSectionView: View {
    var unit: Unit
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            Text("UNIT INFORMATION")
                .font(.caption)
                .fontWeight(.semibold)
                .foregroundColor(.secondary)
                .padding(.top, 12)
                .padding(.bottom, 4)
                .padding(.leading, 4)
            HStack {
                Text("Isochronous Input Plugs:").bold()
                Text("\(unit.isochronousInputPlugs.count)")
            }
            HStack {
                Text("Isochronous Output Plugs:").bold()
                Text("\(unit.isochronousOutputPlugs.count)")
            }
            HStack {
                Text("External Input Plugs:").bold()
                Text("\(unit.externalInputPlugs.count)")
            }
            HStack {
                Text("External Output Plugs:").bold()
                Text("\(unit.externalOutputPlugs.count)")
            }
            if !unit.isochronousInputPlugs.isEmpty {
                PlugListView(title: "Isochronous Input Plugs", plugs: unit.isochronousInputPlugs)
            }
            if !unit.isochronousOutputPlugs.isEmpty {
                PlugListView(title: "Isochronous Output Plugs", plugs: unit.isochronousOutputPlugs)
            }
            if !unit.externalInputPlugs.isEmpty {
                PlugListView(title: "External Input Plugs", plugs: unit.externalInputPlugs)
            }
            if !unit.externalOutputPlugs.isEmpty {
                PlugListView(title: "External Output Plugs", plugs: unit.externalOutputPlugs)
            }
        }
    }
}


=== ./DeviceBasicInfoView.swift ===
import SwiftUI

struct DeviceBasicInfoView: View {
    var guid: String
    var name: String
    var vendor: String
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            HStack {
                Text("GUID:").bold()
                Text(guid)
            }
            HStack {
                Text("Device Name:").bold()
                Text(name)
            }
            HStack {
                Text("Vendor Name:").bold()
                Text(vendor)
            }
        }
    }
}


=== ./HexDumpView.swift ===
import SwiftUI

struct HexDumpView: View {
    var data: Data
    var body: some View {
        ScrollView(.horizontal) {
            Text(data.map { String(format: "%02X", $0) }.joined(separator: " "))
                .font(.system(.body, design: .monospaced))
                .padding(4)
                .background(Color.gray.opacity(0.2))
                .cornerRadius(4)
        }
    }
}


=== ./AudioSubunitDetailsView.swift ===
import SwiftUI

struct AudioSubunitDetailsView: View {
    var subunit: Subunit
    var onSelectPlug: ((Plug) -> Void)? = nil
    var body: some View {
        Section(header: Text("Audio Subunit Details").font(.headline)) {
            if let destPlugs = subunit.audioDestinationPlugs {
                HStack {
                    Text("Audio Destination Plugs:").bold()
                    Text("\(destPlugs.count)")
                }
                PlugListView(title: "Audio Destination Plugs", plugs: destPlugs, onSelect: onSelectPlug)
            }
            if let srcPlugs = subunit.audioSourcePlugs {
                HStack {
                    Text("Audio Source Plugs:").bold()
                    Text("\(srcPlugs.count)")
                }
                PlugListView(title: "Audio Source Plugs", plugs: srcPlugs, onSelect: onSelectPlug)
            }
            // Placeholder for Function Block details
        }
    }
}


=== ./ExpandableSectionView.swift ===
import SwiftUI

struct ExpandableSectionView<Content: View>: View {
    var title: String
    @ViewBuilder var content: () -> Content
    @State private var expanded: Bool = false
    var body: some View {
        DisclosureGroup(isExpanded: $expanded) {
            content()
        } label: {
            Text(title).font(.subheadline).bold()
        }
    }
}


=== ./InfoBlockDetailView.swift ===
import SwiftUI

struct InfoBlockDetailView: View {
    var infoBlock: InfoBlock
    @State private var expanded: Bool = false
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("Info Block Details (Type: \(infoBlock.type))").font(.headline)
            HStack {
                Text("Compound Length:").bold()
                Text("\(infoBlock.compoundLength)")
            }
            HStack {
                Text("Primary Fields Length:").bold()
                Text("\(infoBlock.primaryFieldsLength)")
            }
            if !infoBlock.primaryFields.isEmpty {
                Text("Primary Fields:").bold()
                ForEach(infoBlock.primaryFields.sorted(by: { $0.key < $1.key }), id: \ .key) { key, value in
                    HStack {
                        Text("\(key):").italic()
                        Text(value)
                    }
                }
            } else {
                HexDumpView(data: infoBlock.rawBytes)
            }
            if !infoBlock.nestedBlocks.isEmpty {
                DisclosureGroup(isExpanded: $expanded) {
                    ForEach(infoBlock.nestedBlocks) { nested in
                        InfoBlockDetailView(infoBlock: nested)
                    }
                } label: {
                    Text("Nested Info Blocks (") + Text("\(infoBlock.nestedBlocks.count)") + Text(")")
                }
            }
        }
        .padding()
    }
}


=== ./SubunitInfoSectionView.swift ===
import SwiftUI

struct SubunitInfoSectionView: View {
    var subunits: [Subunit]
    var body: some View {
        VStack(alignment: .leading, spacing: 0) {
            Text("SUBUNIT INFORMATION")
                .font(.caption)
                .fontWeight(.semibold)
                .foregroundColor(.secondary)
                .padding(.top, 12)
                .padding(.bottom, 4)
                .padding(.leading, 4)
            ForEach(subunits) { subunit in
                HStack(spacing: 8) {
                    Image(systemName: subunit.type == "Music" ? "music.note" : subunit.type == "Audio" ? "speaker.wave.2" : "questionmark.square")
                        .foregroundColor(.accentColor)
                    Text("\(subunit.type) Subunit (") + Text(subunit.type == "Music" ? "0x0C" : subunit.type == "Audio" ? "0x08" : "0x??") + Text(")")
                        .fontWeight(.medium)
                    Spacer()
                    HStack(spacing: 4) {
                        Image(systemName: subunit.present ? "checkmark.circle.fill" : "xmark.circle")
                            .foregroundColor(subunit.present ? .green : .secondary)
                        Text(subunit.present ? "Present" : "Absent")
                            .foregroundColor(subunit.present ? .green : .secondary)
                            .font(.caption)
                    }
                }
                .padding(.vertical, 6)
                .padding(.horizontal, 10)
            }
        }
    }
}


=== ./PlugDetailView.swift ===
import SwiftUI

struct PlugDetailView: View {
    var plug: Plug
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("Details: \(plug.name)").font(.headline)
            HStack {
                Text("Subunit Address:").bold()
                Text(plug.subunitAddress)
            }
            HStack {
                Text("Plug Number:").bold()
                Text("\(plug.number)")
            }
            HStack {
                Text("Direction:").bold()
                Text(plug.direction.description)
            }
            HStack {
                Text("Usage:").bold()
                Text(plug.usage.description)
            }
            if let conn = plug.connectionInfo {
                HStack {
                    Text("Connected Source Subunit:").bold()
                    Text(conn.connectedSourceSubunit)
                }
                HStack {
                    Text("Connected Source Plug:").bold()
                    Text(conn.connectedSourcePlug)
                }
                HStack {
                    Text("Connection Status:").bold()
                    Text(conn.connectionStatus)
                }
            }
            if let fmt = plug.currentStreamFormat {
                HStack {
                    Text("Current Stream Format:").bold()
                    Text(fmt.toString())
                }
            }
            if !plug.supportedStreamFormats.isEmpty {
                Text("Supported Stream Formats:").bold()
                ForEach(plug.supportedStreamFormats, id: \ .id) { fmt in
                    Text(fmt.toString()).font(.caption)
                }
            }
        }
        .padding()
    }
}


=== ./FWControlApp.swift ===
//
//  FWControlApp.swift
//  FWControl
//
//  Created by Alexander Shabelnikov on 15.04.2025.
//

import SwiftUI

@main
struct FWControlApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}


=== ./MusicSubunitDetailsView.swift ===
import SwiftUI

struct MusicSubunitDetailsView: View {
    var subunit: Subunit
    var onSelectPlug: ((Plug) -> Void)? = nil
    @State private var showStatusDescriptor: Bool = false
    var body: some View {
        Section(header: Text("Music Subunit Details").font(.headline)) {
            if let destPlugs = subunit.musicDestinationPlugs {
                HStack {
                    Text("Music Destination Plugs:").bold()
                    Text("\(destPlugs.count)")
                }
                PlugListView(title: "Music Destination Plugs", plugs: destPlugs, onSelect: onSelectPlug)
            }
            if let srcPlugs = subunit.musicSourcePlugs {
                HStack {
                    Text("Music Source Plugs:").bold()
                    Text("\(srcPlugs.count)")
                }
                PlugListView(title: "Music Source Plugs", plugs: srcPlugs, onSelect: onSelectPlug)
            }
            if let status = subunit.statusDescriptor {
                Button(action: { showStatusDescriptor.toggle() }) {
                    Label("Status Descriptor (Type 0x80)", systemImage: "doc.text.magnifyingglass")
                }
                .sheet(isPresented: $showStatusDescriptor) {
                    InfoBlockDetailView(infoBlock: status)
                }
            }
        }
    }
}


=== ./ContentView.swift ===
//
//  ContentView.swift
//  FWControl
//
//  Created by Alexander Shabelnikov on 15.04.2025.
//

import SwiftUI

import SwiftUI

struct ContentView: View {
    @State private var devices: [Device] = MockData.devices
    @State private var selectedDevice: Device? = MockData.devices.first
    @State private var selectedPlug: Plug? = nil
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 12) {
                    HStack {
                        DeviceSelectorView(selectedDevice: $selectedDevice, devices: devices)
                        if let device = selectedDevice {
                            DeviceStatusIndicatorView(isConnected: device.isConnected)
                            Spacer()
                            DeviceRefreshButton {
                                // TODO: Trigger device refresh logic
                            }
                        }
                    }
                    if let device = selectedDevice {
                        DeviceBasicInfoView(guid: device.guid, name: device.name, vendor: device.vendor)
                        if let unit = device.units.first {
                            UnitInfoSectionView(unit: unit)
                        }
                        SubunitInfoSectionView(subunits: device.subunits)
                        ForEach(device.subunits) { subunit in
                            if subunit.type == "Music" && subunit.present {
                                MusicSubunitDetailsView(subunit: subunit, onSelectPlug: { plug in selectedPlug = plug })
                            } else if subunit.type == "Audio" && subunit.present {
                                AudioSubunitDetailsView(subunit: subunit, onSelectPlug: { plug in selectedPlug = plug })
                            }
                        }
                    }
                    Spacer()
                }
                .padding()
                .frame(maxWidth: .infinity, alignment: .leading)
            }
            .navigationTitle("FW Audio Device Inspector")
            if let plug = selectedPlug {
                PlugDetailView(plug: plug)
                    .frame(minWidth: 320, maxWidth: 400)
            } else {
                Text("Select a plug to view details.")
                    .foregroundColor(.secondary)
                    .frame(minWidth: 320, maxWidth: 400)
            }
        }
    }
}

// MARK: - Mock Data for Preview
struct MockData {
    static func mapDeviceInfoToDevice(_ info: DeviceInfo) -> Device {
        let unit = Unit(
            isochronousInputPlugs: info.isoInputPlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
            isochronousOutputPlugs: info.isoOutputPlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
            externalInputPlugs: info.externalInputPlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
            externalOutputPlugs: info.externalOutputPlugs.map { MockData.mapAudioPlugInfoToPlug($0) }
        )
        
        var subunits: [Subunit] = []
        if let music = info.musicSubunit {
            subunits.append(Subunit(
                type: "Music",
                present: true,
                musicDestinationPlugs: music.musicDestPlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
                musicSourcePlugs: music.musicSourcePlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
                audioDestinationPlugs: nil,
                audioSourcePlugs: nil,
                statusDescriptor: nil // Could map statusDescriptorInfoBlocks[0] if desired
            ))
        }
        if let audio = info.audioSubunit {
            subunits.append(Subunit(
                type: "Audio",
                present: true,
                musicDestinationPlugs: nil,
                musicSourcePlugs: nil,
                audioDestinationPlugs: audio.audioDestPlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
                audioSourcePlugs: audio.audioSourcePlugs.map { MockData.mapAudioPlugInfoToPlug($0) },
                statusDescriptor: nil
            ))
        }
        return Device(
            guid: String(format: "0x%013llX", info.guid),
            name: info.deviceName,
            vendor: info.vendorName,
            isConnected: info.isConnected,
            units: [unit],
            subunits: subunits
        )
    }

    static func mapAudioPlugInfoToPlug(_ info: AudioPlugInfo) -> Plug {
        Plug(
            name: info.plugName ?? info.label,
            number: Int(info.plugNumber),
            direction: info.direction,
            usage: info.usage,
            subunitAddress: String(format: "0x%02X", info.subunitAddress),
            connectionInfo: info.connectionInfo.map { ConnectionInfo(
                connectedSourceSubunit: String(format: "0x%02X", $0.sourceSubUnit),
                connectedSourcePlug: String($0.sourcePlugNum),
                connectionStatus: $0.description
            )},
            currentStreamFormat: info.currentStreamFormat,
            supportedStreamFormats: info.supportedStreamFormats
        )
    }

    static let duetDeviceInfo = DummyData.createDuetDummyDeviceInfo()
    static let device = mapDeviceInfoToDevice(duetDeviceInfo)
    static let devices = [device]
}

#Preview {
    ContentView()
}


